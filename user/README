Dependencies
============
http://www.netfilter.org/projects/libnfnetlink/files/libnfnetlink-0.0.40.tar.bz2
http://www.netfilter.org/projects/libnetfilter_queue/files/libnetfilter_queue-0.0.16.tar.bz2

http://cr.yp.to/mac/poly1305aes-20050218.tar.gz

Mac OS X 10.6
-------------

The default Mac OS X 10.6 install comes with an old version of OpenSSL. To run
tcpcrypt, you must install OpenSSL 1.0.0 or later and configure with:

   ./Configure darwin64-x86_64-cc shared

Then, running `make` will build libssl.dylib in openssl/. If you run `make
install_sw`, you're finished. If you don't want to install the openssl libs
globally, then before you run any of the tcpcrypt binaries you just built, set
the env var DYLD_LIBRARY_PATH to the full path of the openssl/ dir containing
the libssl.dylib you just built.

Firewall setup
==============
1. FreeBSD & Mac OS.  Linux users, read this too.

   ipfw 01 add divert 666 tcp from any to any

   This will divert all TCP packets to tcpcryptd [divert port 666], and it will
   add it as rule #1.  It's important that this rule is high on the list since
   tcpcryptd modifies the packet quite a lot, including sequence numbers, so
   other items (e.g., natd) may get confused if tcpcryptd doesn't do its magic
   first.

2. Linux.
   
   The goal is to try and make linux look like freebsd =D.  There are two
   challenges:
   1) In FreeBSD, after a packet is diverted, the divert daemon can drop the
      packet, or accept it.  In the latter case, firewall processing continues
      from the next rule.  So basically natd will get a chance to run, and other
      firewall rules.  It's a pipeline.  On Linux, you can either accept or drop
      the packet, which ignores the rest of the firewall.

   2) In FreeBSD, you can easily order tcpcryptd, then natd, because they're
      both in userland, and both use divert, and the whole firewall is a
      pipeline.  On Linux natd is IP connection tracking in the kernel, which is
      used for stateful firewalls too.  We gotta make tcpcryptd run BEFORE
      conntrack.

   The naive way to use tcpcryptd:

   iptables -A OUTPUT -p tcp -j NFQUEUE --queue-num 666
   iptables -A INPUT -p tcp -j NFQUEUE --queue-num 666

   This will apply tcpcrypt to all locally destined (or generated) TCP packets.
   This will work, but you'll run into problems #1 and #2, which may not be
   problems if you don't have a firewall or nat setup.

   To make tcpcrypt work the "proper" way, making sure that nat and stateful
   firewalls (e.g., -m state --state ESTABLISHED) work:

   iptables -t raw -A PREROUTING -p tcp -j NFQUEUE --queue-num 666
   iptables -t mangle -A POSTROUTING -p tcp -j NFQUEUE --queue-num 666

   This will apply tcpcrypt to all TCP packets entering and exiting the box,
   including forwarded packets.  Note that this setup will respect firewall
   rules in other tables but terminate those in the raw and mangle tables.  In
   short, your firewall rules in the filter table and nat table (those that you
   probably care about most) will work.  You'll get caught by problem #1 though.

   To make tcpcrypt work the elite way, making sure that all firewall rules are
   obeyed and conntrack isn't confused:

   iptables -t raw -N tcpcrypt
   iptables -t raw -A tcpcrypt -p tcp -m mark --mark 0x0/0x10 -j NFQUEUE --queue-num 666
   iptables -t raw -I PREROUTING -j tcpcrypt

   iptables -t mangle -N tcpcrypt
   iptables -t mangle -A tcpcrypt -p tcp -m mark --mark 0x0/0x10 -j NFQUEUE --queue-num 666
   iptables -t mangle -I POSTROUTING -j tcpcrypt
 
   And launch tcpcryptd with -x 0x10

   This example is like before, but will create a chain with only the tcpcrypt
   rule, which will run only if a packet is unmarked.  When tcpcryptd needs to
   accept a packet, rather than passing a verdict of ACCEPT, which terminates
   all rule processing, it will pass a verdict of REPEAT, which restarts
   processing at the current chain.  To avoid loops, it will also mark the
   packet so that the rule to divert will be matched only once.  Effectively the
   first time round real work will be done, and the second time round we
   "return" to process the other rules.

   Note that you can make tcpcryptd work transparently on forwarded traffic, and
   even in conjunction with NAT.  You can pretend that the Internet is
   tcpcrypted.  Lets say eth0 is your LAN.  You can do something like:

   [create the tcpcrypt chains as explained earlier.]

   iptables -t raw -A PREROUTING -i eth0 -j tcpcrypt
   iptables -t mangle -A POSTROUTING -o eth0 -j tcpcrypt

   tcpcryptd will see all incoming traffic from eth0 and make it look like
   standard TCP to the outside world, and will then tcpcrypt all the responses
   coming back to eth0.  There's one caveat though when using it in conjunction
   with NAT (conntrack).  tcpcryptd forges a packet (the INIT2) and this
   confuses conntrack as it thinks it's a new connection and it changes the
   source port.  You therefore need to add:

   iptables -t raw -A OUTPUT -o eth0 -j NOTRACK

   i.e., all locally generated traffic (the forged packet from tcpcryptd) should
   not be natted.  In fact I don't even know why it is being natted (maybe a
   bug).  Of course you need to setup nat with something like:

   iptables -t nat -A POSTROUTING -o eth1 -j SNAT --to-source 1.2.3.4

   where eth1 is your Internet interface and 1.2.3.4 your Internet static IP.
